@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho

class Client {
    - Service service;
    - LinkedList<Location> locations;
    - int dni;

    + Client();
    + Order requestOrder(Company company, Order order);
}

class Location{
    - int height;
    - String street;
    - String area;
    - int floor;
    - int department;
    + Location();
}


class RobotRegister{
    - Robot robot;
    - LinkedList<Order> orders;
}

abstract Robot{
    - float costPerHourToCompany;
}
class S031RTY{
    - float costPerHourToCompany=2700;
}
class K311Yfu{
    - float costPerHourToCompany=500;
}
class P011H{
    - float costPerHourToCompany=1500;
}
class K311Ya{
    - float costPerHourToCompany=5000;
}
class K311Yfl{
    - float costPerHourToCompany=100;
}

interface OrderingRobot{
    + void Order()
}
interface ShiningRobot{
    + void Shine()
}

abstract Service{
    - int OrderingQuantity;
    - int CleaningQuantity;
}
class Platinum{
    - OrderingQuantity=ilimitado;
    - CleaningQuantity=ilimitado;
}
class Classic{
    - OrderingQuantity=3;
    - CleaningQuantity=ilimitado;
}

class Economic{
    - OrderingQuantity=0;
    - CleaningQuantity=3;
}

class Company{
    -SpecialistsAssigner specialistAssigner
    - ArrayList<Client> clients;
    - ArrayList<Robot> robots;
    - ArrayList<Order> orders;
    - CleantypeSelector cleanTypeSelector;
    - RobotAssigner robotAssigner;
    - ArrayList<RobotRegister> orderPerRobot;
    - CommunicationModuleReciver communicationModule;

    + Company();
    + CommunicationModuleReciver getCommunicationModuleReciver();
    + void assign(Order);
}

class OrderVerifyer{
    + void verifyOrder(Order order);
    - Robot GetRequiredRobot(Order order);
    - Robot GetRequiredToPlatinumRobot(Order order);
}

class RobotAssigner{
   + RobotAssigner();
   + void AssignRobot(Order order, ArrayList<Robot> robots, ArrayList<RobotRegister> robotsOrders);
   - ArrayList<Robot> GetSuitableRobots(Order order, ArrayList<Robot> robots);
   - Robot GetCheapestRobot(ArrayList<Robot> robots);
   - Robot GetRequiredRobotToPlatinumRobot(ArrayList<Robot> suitableRobots, ArrayList<RobotRegister> robotsOrders)
}

class Order{

    - CleanType cleanType;
    - Location location;
    - boolean wantsOrder;
    - boolean wantsPolish;
    - String surface;
    - Client client;
    - Arraylist<Repair> repairsRequested;
    - CleanData cleanData;
    + CleanType createOrderCleanType();
    + Order();
    - ArrayList<Robot> robotsAsigned;
    - ArrayList<Specialists> specialistsAssigned;
}



class CleantypeSelector {

+CleantypeSelector();
+CleanType createOrderCleanType(CleanData cleanData);
-boolean hasJustPolvoOrEmpty(HashSet<String> residuos)
-boolean numberOfPetsSimple(Integer cantMascotas)
-int daysFromLastClean(Date lastCleanDate){
-boolean recentlyCleaned(Date lastCleanDate)
}


enum CleanType{
    SIMPLE,
    COMPLEJA;
}

class OrderVerifyer{
    - boolean validateCreditClient(Order order);
    - boolean validateService(Order order);
}

Interface PaymentModule{
}



interface Specialist{
    + float getSalary();
    + void repair();
    + boolean canHandle(Repair repair);
}

class Gasist implements Specialist{
String name;
Float wage;
}

class Electritian implements Specialist{
String name;
Float wage;
}

abstract class Repair{
   -Complexity complexity;
   +verifyComplexityRange();
   +calculateRepairPrice();
}
class GasRepair extends Repair{

}
class ElectricalRepair extends Repair{

}

class SpecialistsAssigner {
+iterateOrder(order);
-getRequiredSpecialist(repair);
-assignSpecialistToOrder(Specialist);

}

SpecialistsAssigner->Order

SpecialistsAssigner->Repair

SpecialistsAssigner-left>Specialist

Specialists-left->Repair
OrderVerifyer <.left. PaymentModule
OrderVerifyer <-- Order

Service <|-- Platinum
Service <|-- Classic
Service <|-- Economic


CleantypeSelector<--CleantypeSelector

Company *-- SpecialistsAssigner

Company*-- Robot
Company *-- Client
Company *-- Order
Company *-- RobotRegister
Company <-left- OrderVerifyer
Company <-up- RobotAssigner

Robot <|--- K311Yfl
Robot <|--- K311Yfu
Robot <|--- P011H
Robot <|--- K311Ya
Robot <|--- S031RTY

ShiningRobot <.. K311Yfu
ShiningRobot <.. P011H
ShiningRobot <.. K311Ya
OrderingRobot <.. K311Yfu
OrderingRobot <.. K311Ya
OrderingRobot <.. S031RTY

Client *-- Service
Client *-- Location
Company *--Specialist
Company *-CleantypeSelector
Order*-->Specialists
Order*-->Repair
Order- CleanType
Client*--Order
@enduml