@startuml
'https://plantuml.com/class-diagram

skinparam linetype ortho

class Client {
    - Service service;
    - Collection locations;
    - int dni;
    + getters
    + setters

    + Client();
    + void sendOrder(Company company, Order order);
}

class Location{
    - String provincia;
    - String barrio;
    - String calle;
    + getters
    + Location();
}


class RobotRegister{
    - Robot robot;
    - LinkedList<Order> orders;
}

abstract Robot{
    - float costPerHourToCompany;
}
class S031RTY{
    - float costPerHourToCompany=2700;
}
class K311Yfu{
    - float costPerHourToCompany=500;
}
class P011H{
    - float costPerHourToCompany=1500;
}
class K311Ya{
    - float costPerHourToCompany=5000;
}
class K311Yfl{
    - float costPerHourToCompany=100;
}

interface OrderingRobot{
    + void Order()
}
interface ShiningRobot{
    + void Shine()
}

abstract Service{
    - int OrderingQuantity;
    - int CleaningQuantity;
}
class Platinum{
    - OrderingQuantity=ilimitado;
    - CleaningQuantity=ilimitado;
}
class Classic{
    - OrderingQuantity=3;
    - CleaningQuantity=ilimitado;
}

class Economic{
    - OrderingQuantity=0;
    - CleaningQuantity=3;
}

class Company{
    - final SpecialistsAssigner specialistAssigner
    - ArrayList<Client> clients
    - final ArrayList<Robot> robots
    - ArrayList<Order> orders
    - final CleantypeSelector cleanTypeSelector
    - final RobotAssigner robotAssigner
    - ArrayList<RobotRegister> orderPerRobot
    - CommunicationModuleReciver communicationModule
    - CompanyRegistry companyRegistry
    - RegistryPrinter registryPrinter
    - final OrderVerifyer orderVerifyer
    - final PaymentModule paymentModule
    - final RegistryPrinter registryPrinter
    - PriceCalculator priceCalculator
    + getters
    + setters

    + Company(ArrayList<Robot> robots, ArrayList<Client> clients, ArrayList<Order> orders);
    + CommunicationModuleReciver getCommunicationModuleReciver();
    + void recieveOrder(Order);
    + void createOrUpdateClient(Order order)
    + ClientOrders findClient(Order order)
    + void printExceptionReasonAndThrowBack(Exception e)
}

Company*--CommunicationModuleReciver

class CommunicationModuleReciver
{
    + Robot reciveMessage(Robot robot)
}

class PriceCalculator
{
    - CleanType cleanTypeStrategy
    - CostCalculator costCalculator
    + getters
    + setters
    + void setStrategy(CleanType cleanTypeStrategy)
    + float getFinalPrice(Order order)
}



class CompanyRegistry{
-Arraylist<ClientOrders>
-int numberSimplex;
-int numberComplex;
-getClientTotalPrice(ClientOrders clientOrders);
+getMapUserSpent();
}

class ClientOrders{
    -Client client;
    -List <Orders>
    + getters
    + setters
}

class OrderVerifyer{
    + void verifyOrder(Order order)
}

Company *-> CompanyRegistry
CompanyRegistry ->ClientOrders

class RobotAssigner{
   - GetSuitableRobotsStrategy strategy;
   + RobotAssigner();
   + void AssignRobot(Order order, ArrayList<Robot> robots, ArrayList<RobotRegister> robotsOrders);
   }

class Order{

    - CleanType cleanType;
    - Location location;
    - boolean wantsOrder;
    - boolean wantsPolish;
    - String surface;
    - Client client;
    - Arraylist<Repair> repairsRequested;
    - CleanData cleanData;
    + CleanType createOrderCleanType();
    + Order();
    - ArrayList<Robot> robotsAsigned;
    - ArrayList<Specialists> specialistsAssigned;
}



interface GetSuitableRobotsStrategy{
 + ArrayList<Robot> getSuitableRobots(Order order, ArrayList<Robot> robots, ArrayList<RobotRegister> robotsOrders);
}

class getCheapestRobotStrategy implements GetSuitableRobotsStrategy{

+ArrayList<Robot> getSuitableRobots(Order order, ArrayList<Robot> robots, ArrayList<RobotRegister> robotsOrders);
-getCheapestRobot(ArrayList<Robot> robots)

}

class getPlatinumRobot implements GetSuitableRobotsStrategy{
+ArrayList<Robot> getSuitableRobots(Order order, ArrayList<Robot> robots, ArrayList<RobotRegister> robotsOrders);
-int GetRobotRegistry(Robot robot, ArrayList<RobotRegister> robotOrders)

}

class CleantypeSelector {

+CleantypeSelector();
+CleanType createOrderCleanType(CleanData cleanData);
-boolean hasJustPolvoOrEmpty(HashSet<String> residuos)
-boolean numberOfPetsSimple(Integer cantMascotas)
-int daysFromLastClean(Date lastCleanDate){
-boolean recentlyCleaned(Date lastCleanDate)
}


interface CleanType{

}
class ComplexClean implements CleanType{
}

class SimpleClean implements CleanType{

}


class OrderVerifyer{
    - boolean validateCreditClient(Order order);
    - boolean validateService(Order order);
}

Interface PaymentModule{
}



abstract class Specialist{
    # Repair repair
    # String name
    # float salary
    + getters
    + setters
    + void abstract repair();
    + boolean abstract canHandle(Repair repair);
}

class Gasist extends Specialist{

}

class Electritian extends Specialist{

}

abstract class Repair{
   -Complexity complexity;
   +verifyComplexityRange();
   +calculateRepairPrice();
}
class GasRepair extends Repair{

}
class ElectricalRepair extends Repair{

}

class SpecialistRegister
{
    - ArrayList<Specialist> specialists
    - static SpecialistRegister instance
    - SpecialistRegister()
    + getters
    + setters
    + void clearSpecialist()
    + static SpecialistRegister getInstance()
}

SpecialistsAssigner*-up-SpecialistRegister

class SpecialistsAssigner {
    - SpecialistRegister specialistRegister;
    + getters
    + iterateOrder(order);
    + void clearSpecialistRegister();
    - Specialist getRequiredSpecialist(repair);
    - assignSpecialistToOrder(Specialist);
}

class CleanData{
    String lastCleanDate;
    HashSet<String> residuos;
    int cantMascotas;
}

class RegistryPrinter
{
    - CompanyRegistry companyRegistry
    + RegistryPrinter(CompanyRegistry companyRegistry)
    + void printUserAndSpent()
}

SpecialistsAssigner->Order

Order*-->CleanData
CleantypeSelector -right>CleanData
SpecialistsAssigner->Repair

SpecialistsAssigner-left>Specialist

Specialists-left->Repair
Company *-left- PaymentModule
OrderVerifyer <-- Order

Service <|-- Platinum
Service <|-- Classic
Service <|-- Economic


CleantypeSelector<--CleantypeSelector

Company *-- SpecialistsAssigner

Company*-- Robot
Company *-- Client
Company *-- Order
Company *-- PriceCalculator
Company *-- RegistryPrinter
Company *-- RobotRegister
Company <-left- OrderVerifyer
Company <-up- RobotAssigner

Robot <|--- K311Yfl
Robot <|--- K311Yfu
Robot <|--- P011H
Robot <|--- K311Ya
Robot <|--- S031RTY

ShiningRobot <.. K311Yfu
ShiningRobot <.. P011H
ShiningRobot <.. K311Ya
OrderingRobot <.. K311Yfu
OrderingRobot <.. K311Ya
OrderingRobot <.. S031RTY

Client *-- Service
Client *-- Location
Company *--Specialist
Company *-CleantypeSelector
Order*-->Specialists
Order*-->Repair
Order*- CleanType
Client*--Order
RobotAssigner*->GetSuitableRobotsStrategy
@enduml